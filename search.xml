<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Leetcode116_Populating_Next_Right_Pointers_in_Each_Node]]></title>
    <url>%2F2019%2F08%2F24%2FLeetcode116-Populating-Next-Right-Pointers-in-Each-Node%2F</url>
    <content type="text"><![CDATA[Linkhttps://leetcode.com/problems/populating-next-right-pointers-in-each-node/ SolutionMethed1: RecursionJava Code1234567891011121314151617181920212223242526272829303132333435class Node &#123; public int val; public Node left; public Node right; public Node next; public Node() &#123;&#125; public Node(int _val,Node _left,Node _right,Node _next) &#123; val = _val; left = _left; right = _right; next = _next; &#125;&#125;;class Solution &#123; public Node connect(Node root) &#123; if (root == null) return root; // It is relatively straightforward to link root.left and root.right if (root.left != null) &#123; root.left.next = root.right; &#125; // Note: Which node does root.right.next point to? we must look forward to root.next node; // It is tricky! if (root.right != null &amp;&amp; root.next != null) &#123; root.right.next = root.next.left; &#125; connect(root.left); connect(root.right); return root; &#125;&#125; ComplexityTime: O(n) you need to visit all nodesSpace: O(logn) Method2 Iteration, Can also work on leetcode117Java Code1234567891011121314151617181920212223242526272829303132333435363738394041class Solution &#123; public Node connect(Node root) &#123; Queue&lt;Node&gt; curQueue = new LinkedList&lt;&gt;(); Queue&lt;Node&gt; nextQueue = new LinkedList&lt;&gt;(); if (root == null) return root; curQueue.offer(root); // Abort note: curQueue and nextQueue can't be empty at the same time // while (!curQueue.isEmpty() || !nextQueue.isEmpty()) &#123; // Note : just make sure curQueue is not empty while (!curQueue.isEmpty()) &#123; while (!curQueue.isEmpty()) &#123; Node tmp = curQueue.poll(); // Variable nextQueue keep the next level nodes if (tmp.left != null) &#123; nextQueue.offer(tmp.left); &#125; if (tmp.right != null) &#123; nextQueue.offer(tmp.right); &#125; &#125; // Move next nodes to curQueue and enter the while loop again curQueue.addAll(nextQueue); // Link nodes in same level while (!nextQueue.isEmpty()) &#123; Node tmp = nextQueue.poll(); // Check node is last one or not if (!nextQueue.isEmpty()) &#123; tmp.next = nextQueue.peek(); System.out.println(tmp.val + " point to " + nextQueue.peek().val); &#125; &#125; &#125; return root; &#125;&#125; ComplexityTime : O(n)Space : O(n)]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Prim_and_Kruskal]]></title>
    <url>%2F2019%2F08%2F23%2FPrim-and-Kruskal%2F</url>
    <content type="text"><![CDATA[Similarity greedy algorithm Boths have two sets, the one set contains all visited nodes, the other set contains all unvisited nodes; find the minimal edges between two sets Difference Prim starts with a random node, while Kruskal starts with the miminal edgs]]></content>
      <categories>
        <category>Think</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[leetcode328_Odd_Even_Linked_List]]></title>
    <url>%2F2019%2F08%2F23%2Fleetcode328-Odd-Even-Linked-List%2F</url>
    <content type="text"><![CDATA[Problem link(https://leetcode.com/problems/odd-even-linked-list/) Code12345678910111213141516171819202122232425class Solution &#123; public ListNode oddEvenList(ListNode head) &#123; if (head == null || head.next == null) return head; ListNode odd = head; ListNode even = head.next; // This node is preserved for connect with odd tail node; ListNode evenStartNode = head.next; // Note: stop condition, either odd.next or even.next is null, must break while while (odd.next != null &amp;&amp; even.next != null) &#123; // Link next odd node, just skip odd node odd.next = even.next; // odd move forward odd = odd.next; // Same with odd node even.next = odd.next; even = even.next; &#125; odd.next = evenStartNode; return head; &#125;&#125;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked list</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode83_Remove_Duplicates_from_Sorted_List]]></title>
    <url>%2F2019%2F08%2F23%2Fleetcode83-Remove-Duplicates-from-Sorted-List%2F</url>
    <content type="text"><![CDATA[Code1234567891011121314151617181920212223242526272829303132333435/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode deleteDuplicates(ListNode head) &#123; if (head == null || head.next == null) return head; ListNode prev = new ListNode(-1); ListNode cur = head; // Note1: stop condition while (cur != null) &#123; // Update prev and cur node simultaneous prev = cur; cur = cur.next; // skip node that has same val with cur.val // Note: prev don't move forward, still stay where it is // Break while loop condition : 1. cur == null or 2. different val while (cur != null &amp;&amp; prev.val == cur.val) &#123; cur = cur.next; &#125; // Update prev node to link prev and cur node prev.next = cur; &#125; return head; &#125;&#125;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>linked list</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[somaxconn_and_tcp_max_syn_backlog]]></title>
    <url>%2F2019%2F08%2F20%2Fsomaxconn-and-tcp-max-syn-backlog%2F</url>
    <content type="text"><![CDATA[12345678910###系统参数含义-net.core.somaxconn = 262144 1.系统级设置， 决定了最大可以存储已经建立连接的socket的数量-net.ipv4.tcp_max_syn_backlog = 8192 1.决定了最大可以存储半连接的socket的数量-net.ipv4.tcp_syncookies = 1 用来防范syn-flood攻击###关系-理论上来说，net.ipv4.tcp_max_syn_backlog &gt;= net.core.somaxconn]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kernel tuning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[K_smallest_element]]></title>
    <url>%2F2019%2F08%2F19%2FK-smallest-element%2F</url>
    <content type="text"><![CDATA[Condition find k smallest element in array, suppose k == 3 Solution In order to find k smallest element, we need to keep a max heap to store the smaller elements if come across a new elemnt smaller than heap top(), namely max element in heap, we need to remove this element and push new one. Code12345678910111213141516171819202122232425262728#include &lt;iostream&gt;#include &lt;queue&gt;int main() &#123; std::priority_queue&lt;int&gt; pq; for (int i = 0; i &lt; 7; i++) &#123; int tmp = rand() % 20; // suppose k equals to 3 if (i &lt; 3) &#123; pq.push(tmp); &#125; else if (tmp &lt; pq.top()) &#123; // remove the max elements pq.pop(); // push new one pq.push(tmp); &#125; &#125; std::cout &lt;&lt; "Hello, World!" &lt;&lt; std::endl; while (!pq.empty()) &#123; std::cout &lt;&lt; pq.top() &lt;&lt; std::endl; pq.pop(); &#125; return 0;&#125; Time ComplexitynLog(K), n means all elements in array, K means max heap size, update and adjust heap need log(k).]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap, priority_queue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tensorflow_Dataset]]></title>
    <url>%2F2019%2F08%2F19%2FTensorflow-Dataset%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536# Wrapping all together -&gt; Switch between train and test set using Initializable iteratorEPOCHS = 10# create a placeholder to dynamically switch between batch sizesbatch_size = tf.placeholder(tf.int64)x, y = tf.placeholder(tf.float32, shape=[None,2]), tf.placeholder(tf.float32, shape=[None,1])dataset = tf.data.Dataset.from_tensor_slices((x, y)).batch(batch_size).repeat()# using two numpy arraystrain_data = (np.random.sample((100,2)), np.random.sample((100,1)))test_data = (np.random.sample((20,2)), np.random.sample((20,1)))iter = dataset.make_initializable_iterator()# get features labelsfeatures, labels = iter.get_next()# make a simple modelnet = tf.layers.dense(features, 8, activation=tf.tanh) # pass the first value from iter.get_next() as inputnet = tf.layers.dense(net, 8, activation=tf.tanh)prediction = tf.layers.dense(net, 1, activation=tf.tanh)loss = tf.losses.mean_squared_error(prediction, labels) # pass the second value from iter.get_net() as labeltrain_op = tf.train.AdamOptimizer().minimize(loss)with tf.Session() as sess: sess.run(tf.global_variables_initializer()) # initialise iterator with train data sess.run(iter.initializer, feed_dict=&#123; x: train_data[0], y: train_data[1], batch_size: BATCH_SIZE&#125;) print('Training...') for i in range(EPOCHS): tot_loss = 0 for _ in range(n_batches): _, loss_value = sess.run([train_op, loss]) tot_loss += loss_value print("Iter: &#123;&#125;, Loss: &#123;:.4f&#125;".format(i, tot_loss / n_batches)) # initialise iterator with test data sess.run(iter.initializer, feed_dict=&#123; x: test_data[0], y: test_data[1], batch_size: test_data[0].shape[0]&#125;) print('Test Loss: &#123;:4f&#125;'.format(sess.run(loss)))]]></content>
      <categories>
        <category>DL</category>
      </categories>
      <tags>
        <tag>tensorflow, dataset</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode72_Subsets_bit]]></title>
    <url>%2F2019%2F08%2F18%2Fleetcode78-Subsets-bit%2F</url>
    <content type="text"><![CDATA[Example12345678910bit ans0 0 0 == []0 0 1 == [1]0 1 0 == [2]0 1 1 == [1, 2]...1 1 0 == [2, 3]...1 1 1 == [1, 2, 3] Code12345678910111213141516171819202122class Solution &#123;public: std::vector&lt;std::vector&lt;int&gt;&gt; subsets(std::vector&lt;int&gt;&amp; nums) &#123; if (nums.empty()) return res; // 1 &lt;&lt; nums.size() == 2^nums.size() means number of all subset for (int i = 0; i &lt; 1&lt;&lt;nums.size(); ++i) &#123; tmp.clear(); // use bit enumerate candidate num in nums for (int j = 0; j &lt; nums.size(); ++j) &#123; if (i &gt;&gt; j &amp; 1) &#123; tmp.push_back(nums[j]); &#125; &#125; res.push_back(tmp); &#125; return res; &#125;public: std::vector&lt;int&gt; tmp; std::vector&lt;std::vector&lt;int&gt;&gt; res;&#125;; Summary: bit operation is more efficient]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode78_Subsets]]></title>
    <url>%2F2019%2F08%2F18%2Fleetcode78_Subsets%2F</url>
    <content type="text"><![CDATA[Condition Given a set of distinct integers, nums, return all possible subsets (the power set). Note: The solution set must not contain duplicate subsets. Code1123456789101112131415161718192021222324252627282930313233343536class Solution &#123;public: std::vector&lt;std::vector&lt;int&gt;&gt; subsets(std::vector&lt;int&gt;&amp; nums) &#123; // nums check if (nums.empty()) return res; // start pos // Note: count represents size of tmp result for (int count = 0; count &lt;= nums.size(); ++count) &#123; dfs(nums, count, 0); &#125; return res; &#125; void dfs(std::vector&lt;int&gt;&amp; nums, int count, int idx) &#123; // stop conditions if (count == tmp.size()) &#123; res.push_back(tmp); return; &#125; // dfs and context // traverse remaining nums after idx for (int i = idx; i &lt; nums.size(); i++) &#123; // Note: nums[i] instead of nums[idx] tmp.push_back(nums[i]); dfs(nums, count, i+1); tmp.pop_back(); &#125; &#125;private: std::vector&lt;std::vector&lt;int&gt;&gt; res; std::vector&lt;int&gt; tmp;&#125;; Summary Note: index when traversing remaining element for loop condition is Changing, not for (int i= 0; i &lt; nums.size(); ++i) always Code2123456789101112131415161718192021222324class Solution &#123;public: std::vector&lt;std::vector&lt;int&gt;&gt; subsets(std::vector&lt;int&gt;&amp; nums) &#123; dfs(nums, 0); return res; &#125; void dfs(std::vector&lt;int&gt;&amp; nums, int idx) &#123; // res.push_back(cur); for (int i = idx; i &lt; nums.size(); i++) &#123; // nums[i] selected cur.push_back(nums[i]); dfs(nums, i+1); // we can ignore this element, nums[i] cur.pop_back(); &#125; &#125;private: std::vector&lt;std::vector&lt;int&gt;&gt; res; std::vector&lt;int&gt; cur;&#125;; Code2 Summary At every step, we have two choices for each element either we can ignore the element or we can include the element in cur vector]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode46_Permutations]]></title>
    <url>%2F2019%2F08%2F18%2Fleetcode46-Permutations%2F</url>
    <content type="text"><![CDATA[Contidion Given a collection of distinct integers, return all possible permutations. Code1234567891011121314151617181920212223242526272829303132333435363738class Solution &#123;public: std::vector&lt;std::vector&lt;int&gt;&gt; permute(std::vector&lt;int&gt; &amp;nums) &#123; if (nums.empty()) return res; dfs(nums, 0); return res; &#125; void dfs(std::vector&lt;int&gt; &amp;nums, int idx) &#123; // stop condition if (idx == nums.size()) &#123; res.push_back(tmp); return; &#125; // check each num of nums for (int i = 0; i &lt; nums.size(); i++) &#123; if (numSet.count(nums[i]) == 0) &#123; // process nums[i] numSet.insert(nums[i]); tmp.push_back(nums[i]); // dfs dfs(nums, idx+1); // restore context tmp.pop_back(); numSet.erase(nums[i]); &#125; &#125; &#125;private: std::unordered_set&lt;int&gt; numSet; std::vector&lt;int&gt; tmp; std::vector&lt;std::vector&lt;int&gt;&gt; res;&#125;; Summary Note: Change context and Restore context if nums has duplicated elemement, it’s not a good idea to use unordered_set, use vector instead to mark which element is used]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode79_Word_Search]]></title>
    <url>%2F2019%2F08%2F18%2Fleetcode79-Word-Search%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;class Solution &#123;public: bool exist(std::vector&lt;std::vector&lt;char&gt;&gt;&amp; board, std::string word) &#123; // board check if (board.empty() || board[0].empty()) return false; // travel start position for (int x = 0; x &lt; board.size(); ++x) &#123; for (int y = 0; y &lt; board[0].size(); ++y) &#123; // dfs if (dfs(board, word, x, y, 0)) return true; &#125; &#125; return false; &#125; bool dfs(std::vector&lt;std::vector&lt;char&gt;&gt;&amp; board, std::string word, int x, int y, int idx) &#123; // boundary check // if (x &lt; 0 &amp;&amp; x &gt;= board.size() &amp;&amp; y &lt; 0 &amp;&amp; y &gt;= board[0].size()) // return false; // stop condition if (board[x][y] != word[idx]) return false; if (idx == word.size() -1) return true; // Note1: mark the postion board[x][y] = '.'; // four direction recuirsion for (int i = 0; i &lt; 4; i++) &#123; // create new variable tmpX, not using origin x int tmpX= x + dx[i]; int tmpY= y + dy[i]; std::cout &lt;&lt; tmpX &lt;&lt; " " &lt;&lt; tmpY &lt;&lt; std::endl; // boundary check, // Note2: if x, y in board, use condition1 &amp;&amp; condition2 // if x,y not in board condition1 || condition2 and so on if (tmpX &gt;= 0 || tmpX &lt; board.size() || tmpY &gt;= 0 || tmpY &gt;= board[0].size()) continue; // dfs start // Note: return final answer as soon as possible if (dfs(board, word, tmpX, tmpY, idx + 1)) return true; &#125; // Note1: unmark the postion, restore context board[x][y] = word[idx]; return false; &#125; std::vector&lt;int&gt; dx&#123;-1, 0, 1, 0&#125;; std::vector&lt;int&gt; dy&#123;0, 1, 0, -1&#125;;&#125;;// testint main() &#123; std::vector&lt;std::vector&lt;char&gt;&gt; board&#123;&#123;'A', 'B', 'C', 'E'&#125;, &#123;'S', 'F', 'C', 'S'&#125;, &#123;'A', 'D', 'E', 'E'&#125;&#125;; std::string word("ABCCED"); Solution sol = Solution(); bool res = sol.exist(board, word); std::cout &lt;&lt; res &lt;&lt; std::endl; std::cout &lt;&lt; "Hello, World!" &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Perception]]></title>
    <url>%2F2019%2F08%2F17%2FPerception%2F</url>
    <content type="text"><![CDATA[有些事情一旦知道了开始和结束，就基本可以判断这件事情的价值和意义。 很多东西对于深处底层的人来说都是不可见的，要摆脱所谓的底层，需要有很强的前瞻意识和分析问题的能力，看的越多，分析的更深入，才有可能看到真相。]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[reverse_string_recursion]]></title>
    <url>%2F2019%2F08%2F17%2Freverse-string-recursion%2F</url>
    <content type="text"><![CDATA[12345678910111213std::string dfs(std::string s, int i) &#123; if (i == 0) return s.substr(i, 1); // 因为涉及到字符串的拼接，所有需要将char类型转变成字符串类型 return s.substr(i, 1) + dfs(s, i-1);&#125;int main() &#123; std::string s("hello"); Solution sol = Solution(); std::string res = sol.dfs(s, s.size()-1);&#125;]]></content>
      <tags>
        <tag>recursion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode127_Word_Ladder]]></title>
    <url>%2F2019%2F08%2F17%2Fleetcode127-Word-Ladder%2F</url>
    <content type="text"><![CDATA[思路对于求解最短、最优的问题，可以使用bfs来做。 1234567891011121314151617181920212223242526272829303132333435363738class Solution &#123;public: int ladderLength(std::string beginWord, std::string endWord, std::vector&lt;std::string&gt;&amp; wordList) &#123; // preprocess std::unordered_set&lt;std::string&gt; wordSet(wordList.begin(), wordList.end()); if (wordSet.count(endWord) == 0) return 0; std::queue&lt;std::pair&lt;std::string, int&gt;&gt; que; wordSet.insert(endWord); wordSet.erase(beginWord); // bfs start que.push(std::make_pair(beginWord ,1)); while (!que.empty()) &#123; std::pair&lt;std::string, int&gt; tmp = que.front(); que.pop(); std::string word = tmp.first; unsigned int val = tmp.second; std::string tmpWord = word; // find optimal and return if (word == endWord) return val; // find next words and put into queue for (int i = 0; i &lt; word.size(); ++i) &#123; tmpWord = word; for (int j = 0; j &lt; 26; j++) &#123; tmpWord[i] = 'a' + j; if (wordSet.count(tmpWord)) &#123; que.push(std::make_pair(tmpWord, val + 1)); // remove the element pushed to queue wordSet.erase(tmpWord); &#125; &#125; &#125; &#125; return 0; &#125;&#125;; 反思 一开始我使用了dfs来做 使用了一个used来记录使用过的结果，但是在代码中没有使用 要从vector中找某个值，可以使用std::find，但是会比较麻烦，可以直接将vector转换成set，查找用count就行]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git_common_order]]></title>
    <url>%2F2019%2F08%2F16%2Fgit-common-order%2F</url>
    <content type="text"><![CDATA[标签管理123 git tag v0 git push --tags origin master 版本回退123git reset HEAD^git reset a5d385b 分支重命名1git branch -m clean_code optimizing_gif_process 推送到远程分支1git push origin optimizing_gif_process:optimizing_gif_process 删除到远程分支, 也就是推送空分支到远程仓库1git push origin :optimizing_gif_process]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Split_GIF_Frames]]></title>
    <url>%2F2019%2F08%2F16%2FSplit-GIF-Frames%2F</url>
    <content type="text"><![CDATA[Method 11234567891011import imageiofrom PIL import Image# 这一步解析之后，是一个list，里面存放着图片的array数据。frames = imageio.mimread('100.gif')for i, cont in enumerate(frames): # 将array数据转换成Image可以识别的数据 cont = Image.fromarray(cont) cont = cont.convert("RGB") cont.save("100_&#123;:03d&#125;.jpeg".format(i)) Method 2123456from PIL import Image, ImageSequencedef split_gif(img): sequence = [] for frame_idx, frame in enumerate(ImageSequence.Iterator(img), 1): frame = frame.convert('RGB') sequence.append(frame)]]></content>
      <categories>
        <category>CV</category>
      </categories>
      <tags>
        <tag>Image imageio GIF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Resnet_Attention]]></title>
    <url>%2F2019%2F08%2F15%2FResnet-Attention%2F</url>
    <content type="text"><![CDATA[动机 相比与传统残差网络模型机制，残差注意力机制可以达到更细粒度的特征匹配 可以加强目标区域的影响力，抑制非目标区域的影响力 贡献 提出了一种注意力机制模块，大致有两部分组成 一部分是resnet中的部分网络结果，这成为主干分支， trunk branch 一部分是编码解码网络，主要进行了一次下采样和上采样， 这是掩码分支 对主干分支的输出和掩码分支的输出进行按位乘 注意：掩码分支的输出要进行sigmoid处理，使其变成0到1之间的数值，代表主干分支中特征图中该位置像素的影响力 注意：并不是完全的按位乘，那就太naive了，因为会导致梯度弥散问题。因此在这里借鉴了残差网络的和核心原理，使用（1+掩码分支）* 主干分支，如果某个像素位置的掩码很大，那么在这里就会被放大。如果此位置掩码很小，那就相当于保留了主干分支，至少可以保证主干分支的特征， 优秀]]></content>
      <categories>
        <category>DL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Share soup fairly]]></title>
    <url>%2F2019%2F08%2F15%2F%E5%85%AC%E5%B9%B3%E5%88%86%E6%B1%A4%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题以及解决办法问题1一间囚房里关押着两个犯人。每天监狱都会为这间囚房提供一罐汤，让这两个犯人自己来分。起初，这两个人经常会发生争执，因为他们总是有人认为对方的汤比自己的多。 解决方案 一个人分汤 让另一个人先选。 问题2一间囚房里关押着3个犯人。每天监狱都会为这间囚房提供一罐汤，让犯人来分。 解决方案 让A把汤分成三份 让其余的两个人B、C优先选汤, 剩下的给A 将这B、C两个人的汤进行混合 一个人分汤 让另一个人先选 解题思路假设我们已经知道了二个人的问题的解法，那么三个人的问题是由于二个人的问题演变出来的, 因此可以对问题进行拆分，类似分而治之的方法。所以可以把B、C看成一个整体，那么这就是最初的问题，而且我们已经知道答案了。为什么分成三份，那是因为每个人只能拿走三分之一，经过步骤1和2，A的汤的问题就解决了。剩下的就是B和C的事情了，然后将二人的汤混在一起，这又是最初的分汤问题。 简单解释12345全部汤 = A + (B + C) 这就是问题一 A 满意, 拿走了三分之一的汤三份之二的汤 = B + C 这也是问题一B and C 满意, 各拿走了三分之一的汤皆大欢喜 小结想起老子的一句话：道生一，一生二，二生三，三生万物。]]></content>
  </entry>
  <entry>
    <title><![CDATA[leetcode131_Palindrome_Partitioning]]></title>
    <url>%2F2019%2F08%2F14%2Fleetcode131-Palindrome-Partitioning%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;string&gt;using namespace std;class Solution &#123;public: vector&lt;vector&lt;string&gt;&gt; partition(string s) &#123; if (s.size() == 0) &#123; return res; &#125; dfs(s); return res; &#125; void dfs(string s) &#123; // 终止条件 if (s.size() == 0) &#123; res.push_back(inter); return; &#125; // 这里截取字符串是可以取完整个字符串的，但是由于写遍历思维定式，以为是小于号，导致失败 for (int i = 1; i &lt;= s.size(); i++) &#123; string leftString = s.substr(0, i); string rightString = s.substr(i); if (isValid(leftString)) &#123; inter.push_back(leftString); dfs(rightString); inter.pop_back(); &#125; &#125; &#125; bool isValid(string s) &#123; unsigned int left = 0; unsigned int right = s.size()-1; while (left &lt; right) &#123; if (s[left] != s[right]) &#123; return false; &#125; else &#123; left++; right--; &#125; &#125; return true; &#125;private: vector&lt;vector&lt;string&gt;&gt; res; vector&lt;string&gt; inter;&#125;;int main() &#123; Solution sol = Solution(); string s("aab"); vector&lt;vector&lt;string&gt;&gt; res = sol.partition(s); cout &lt;&lt; res.size() &lt;&lt; endl; cout &lt;&lt; "res " &lt;&lt; endl; for (auto item : res) &#123; for (auto x : item) &#123; cout &lt;&lt; x &lt;&lt; endl; &#125; cout &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>recursion, string</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[producer_consumer_pattern]]></title>
    <url>%2F2019%2F08%2F14%2Fproducer-consumer-pattern%2F</url>
    <content type="text"><![CDATA[123456789101112wait(S) &#123; while (S &lt;= 0) &#123; continue; &#125; S--;&#125;&#125;signal(S) &#123; S++;&#125; 12345678910111213141516171819202122232425full = 0empty = nmutext = 1void produce() &#123; while (true) &#123; wait(empty) wait(mutex) produce one item signal(mutex) signal(full) &#125;&#125;void consume() &#123; while (true) &#123; wait(full) wait(mutex) consume one item signal(mutex) signal(empty) &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[mistakes]]></title>
    <url>%2F2019%2F08%2F14%2Fmistakes%2F</url>
    <content type="text"><![CDATA[C++ = and == 引用 for 循环的思维定式，不会根据具体情况考虑 在bfs和dfs的时候，有时候会忘记更新值, 没有及时的push和pop 递归函数，把函数写错了 Python python2 python3的除法问题]]></content>
      <tags>
        <tag>mistakes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode206_Reverse_Linked_List]]></title>
    <url>%2F2019%2F08%2F14%2Fleetcode206-Reverse-Linked-List%2F</url>
    <content type="text"><![CDATA[Iteration version123456789101112131415161718class Solution &#123;public: ListNode* reverseList(ListNode* head) &#123; if (head == nullptr || head-&gt;next == nullptr) &#123; return head; &#125; ListNode* prev = nullptr; ListNode* cur = head; while (cur) &#123; ListNode* nextNode = cur-&gt;next; cur-&gt;next = prev; prev = cur; cur = nextNode; &#125; return prev; &#125;&#125;; Recursion version1234567891011121314151617181920212223242526272829class Solution &#123;public: ListNode* reverseList(ListNode* head) &#123; if (head == nullptr) return head; // dfs has retun val, but we dont care dfs(head); return newHead; &#125; ListNode* dfs(ListNode* cur) &#123; if (cur == nullptr) return cur; if (cur-&gt;next == nullptr) &#123; // perserve the ans and return newHead = cur; return cur; &#125; // dfs start ListNode* node = dfs(cur-&gt;next); node-&gt;next = cur; cur-&gt;next = nullptr; // return cur other than node return cur; &#125;private: ListNode* newHead;&#125;;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[leetcode239_SlidingWindowMaximum]]></title>
    <url>%2F2019%2F08%2F13%2Fleetcode239-SlidingWindowMaximum%2F</url>
    <content type="text"><![CDATA[code123456789101112131415161718192021222324252627class Solution &#123;public: vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) &#123; deque&lt;int&gt; q; vector&lt;int&gt; res; for (int i = 0; i &lt; nums.size(); ++i) &#123; // 按照从大到小的顺序进行存储 在队列中的数字如果小于当前数字则移除 while (!q.empty() &amp;&amp; nums[q.back()] &lt; nums[i]) &#123; q.pop_back(); &#125; q.push_back(i); // 如果已经超过了k个 将最前边的数字移除 if (i - q.front() + 1 &gt; k) &#123; q.pop_front(); &#125; // 当下标达到一定的位置 开始存储结果 if (i &gt;= k-1) &#123; res.push_back(nums[q.front()]); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
</search>
